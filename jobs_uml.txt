@startuml
package Session {
    class Job {
        +id : string
        +name : string
        +status : string
        +group : string
        +progress : int
        +max : int
        +state : JobState
        +autoRemove : bool
        +actions : SEXP
        +show : bool
        +toJson() : json::Object
        {static} +fromJson()
        +addOutput(string)
    }

    class JobsApi {
        {static} -jobs : map<string, Job>
        {static} -notifyClient()
        {static} +addJob() : Job
        {static} +jobsAsJson() : json::Object;
    }

    class ScriptJob {
        {static} -scripts : vector<ScriptJob>;
        {static} +startScriptJob(ScriptLaunchSpec) : string
        {static} +stopScriptJob(string)
    }

    class AsyncRProcess {

    }

    class SessionJobs {
        {static} jobState() : json::Object
        {static} isSuspendable() : bool
        {static} onResume()
        {static} rpc_get_jobs() : json::Object
        {static} rpc_job_output() : json::Array
        {static} rpc_set_job_listening()
        {static} rpc_run_script_job()
        {static} rpc_clear_jobs()
        {static} rpc_execute_job_action()

    }

    class SessionJobs.R {
        {static} rs.api.addJob()
        {static} rs.api.removeJob()
        {static} rs.api.setJobProgress()
        {static} rs.api.addJobProgress()
        {static} rs.api.setJobStatus()
        {static} rs.api.setJobState()
        {static} rs.api.addJobOutput()
        {static} rs.api.runScriptJob()
        {static} rs.api.executeJobAction()
        {static} rs.api.stopJob()
        {static} rs.api.getJobs()
    }

    class SourceWithProgress {
        {static} -emitProgress()
        {static} +sourceWithProgress()
    }

    class SessionClientInit {
        +job_state : string
    }
}

package GwtClient {
    class Client {
    }
}

AsyncRProcess <|-- ScriptJob
ScriptJob ..> JobsApi
ScriptJob --> Job
ScriptJob ..> SessionJobs.R
JobsApi *-- "0..*" Job
SessionJobs ..> JobsApi
SessionJobs ..> Client : clientevent.job_refresh
SessionClientInit ..> SessionJobs
JobsApi ..> Client : clientevent.job_updated
Client ..> SessionJobs
Client ..> SessionClientInit
Job ..> Client : clientevent.job_output
SessionJobs.R ..> SessionJobs
ScriptJob ..> SourceWithProgress

@enduml

@startuml
header
Client Classes
endheader

    class JobManager {
    }

    class JobsTab<< JobsPresenter >> {
    }

    class JobProgressPresenter {
    }


@enduml

@startuml
header
Client Startup
endheader
box "Gwt"
    participant Application
    participant JobManager
    participant JobsTab<< JobsPresenter >>
    participant JobProgressPresenter
    participant JobProgress<< JobProgressPresenter.Display >>
    participant JobsPane<< JobsPresenter.Display >>
    participant JobsList
    participant Console
end box

box "Session"
    participant RPC
    participant SessionJobs
    participant JobsApi
endbox

Application -> RPC : client_init
RPC -> SessionJobs : jobState
SessionJobs -> JobsApi : jobsAsJson
Application <- JobsApi : SessionInfo.job_state
Application -> JobManager : onSessionInit
JobManager -> JobsTab : jobInitEvent
JobsTab -> JobsPane : setInitialJobs
JobsPane -> JobsList : loadJobList
JobManager -> Console : onJobProgress
JobManager -> JobManager : setJobState\nStarts a timer to emit\nJobsElapstedTick events\nwhen there are jobs
JobManager -> JobsTab : onJobsElapsedTick
JobsTab -> JobsPane : syncElapsedTime
JobsPane -> JobsList : syncElapsedTime
JobManager -> JobProgressPresenter : onJobsElapsedTick
JobProgressPresenter -> JobProgress : updateElapsed
@enduml

@startuml
header
Server-Driven Jobs Interaction
endheader
box "Session"
participant RSession
participant ScriptJob
participant JobsApi
participant SessionJobs
participant Job
participant Server
endbox
box "Gwt"
    participant Dispatch
    participant JobsTab<< JobsPresenter >>
    participant JobsPane<< JobsPresenter.Display >>
    participant JobManager
end box

ScriptJob -> JobsApi
JobsApi -> Dispatch : job_updated\n\t(ADD/REMOVE/UPDATED)
Dispatch -> JobsTab : onJobsUpdated
JobsTab -> JobsPresenter.Display : updateJob
Dispatch -> JobManager : onJobsUpdated
RSession -> SessionJobs : onResume
SessionJobs -> Dispatch : job_refresh
Dispatch -> JobManager : onJobRefresh
JobManager -> JobsTab : jobInitEvent
JobsTab -> JobsPresenter.Display : setInitialJobs
ScriptJob -> Job : addOutput
SessionJobs -> Job : addOutput
Job -> Dispatch : job_output
Dispatch -> JobsTab : onJobOutput
JobsTab -> JobsPresenter.Display : addJobOutput

@enduml
